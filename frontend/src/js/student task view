import React, { useState, useEffect } from 'react';
import './css/StudentTaskView.css';

function StudentTaskView() {
    const [tasks, setTasks] = useState([]);
    const [mySubmissions, setMySubmissions] = useState([]);
    const [showSubmitForm, setShowSubmitForm] = useState(false);
    const [selectedTask, setSelectedTask] = useState(null);
    const [submissionText, setSubmissionText] = useState('');
    const [editingSubmission, setEditingSubmission] = useState(null);
    const [loading, setLoading] = useState(false);

    // Debug logging for state changes
    useEffect(() => {
        console.log('StudentTaskView: tasks state changed:', tasks);
    }, [tasks]);

    useEffect(() => {
        console.log('StudentTaskView: mySubmissions state changed:', mySubmissions);
    }, [mySubmissions]);

    const studentId = localStorage.getItem('studentId');

    useEffect(() => {
        console.log('StudentTaskView: useEffect triggered, studentId:', studentId);
        if (studentId) {
            console.log('StudentTaskView: Student ID found, fetching data...');
            fetchTasks();
            fetchMySubmissions();
        } else {
            console.log('StudentTaskView: No student ID found');
            // Set empty arrays to prevent errors
            setTasks([]);
            setMySubmissions([]);
        }
    }, [studentId]);

    const fetchTasks = async () => {
        try {
            setLoading(true);
            console.log('StudentTaskView: Fetching all tasks...');
            const response = await fetch('http://localhost:8070/task/');
            const data = await response.json();
            console.log('StudentTaskView: Tasks response:', data);
            // Ensure we always set an array, even if the API returns something else
            if (Array.isArray(data)) {
                setTasks(data);
            } else if (data && Array.isArray(data.data)) {
                setTasks(data.data);
            } else {
                console.warn('Tasks response is not an array:', data);
                setTasks([]);
            }
        } catch (error) {
            console.error('Error fetching tasks:', error);
            setTasks([]);
        } finally {
            setLoading(false);
        }
    };

    const fetchMySubmissions = async () => {
        try {
            console.log('StudentTaskView: Fetching submissions for studentId:', studentId);
            const response = await fetch(`http://localhost:8070/task-submission/student/${studentId}`);
            const data = await response.json();
            console.log('StudentTaskView: Submissions response:', data);
            // Ensure we always set an array, even if the API returns something else
            if (Array.isArray(data)) {
                setMySubmissions(data);
            } else if (data && Array.isArray(data.data)) {
                setMySubmissions(data.data);
            } else {
                console.warn('Submissions response is not an array:', data);
                setMySubmissions([]);
            }
        } catch (error) {
            console.error('Error fetching submissions:', error);
            setMySubmissions([]);
        }
    };

    const handleSubmitTask = async (e) => {
        e.preventDefault();
        try {
            const response = await fetch('http://localhost:8070/task-submission/submit', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    taskId: selectedTask._id,
                    studentId: studentId,
                    submissionText: submissionText
                }),
            });

            const data = await response.json();
            if (data.success) {
                alert(data.message);
                setShowSubmitForm(false);
                setSelectedTask(null);
                setSubmissionText('');
                fetchMySubmissions();
            } else {
                alert(data.message || 'Failed to submit task');
            }
        } catch (error) {
            console.error('Error submitting task:', error);
            alert('Error submitting task. Please try again.');
        }
    };

    const handleUpdateSubmission = async (e) => {
        e.preventDefault();
        try {
            const response = await fetch(`http://localhost:8070/task-submission/update/${editingSubmission._id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    submissionText: submissionText
                }),
            });

            const data = await response.json();
            if (data.success) {
                alert('Submission updated successfully!');
                setEditingSubmission(null);
                setSubmissionText('');
                fetchMySubmissions();
            } else {
                alert(data.message || 'Failed to update submission');
            }
        } catch (error) {
            console.error('Error updating submission:', error);
            alert('Error updating submission. Please try again.');
        }
    };

    const handleDeleteSubmission = async (submissionId) => {
        if (window.confirm('Are you sure you want to delete this submission?')) {
            try {
                const response = await fetch(`http://localhost:8070/task-submission/delete/${submissionId}`, {
                    method: 'DELETE',
                });

                const data = await response.json();
                if (data.success) {
                    alert('Submission deleted successfully!');
                    fetchMySubmissions();
                } else {
                    alert(data.message || 'Failed to delete submission');
                }
            } catch (error) {
                console.error('Error deleting submission:', error);
                alert('Error deleting submission. Please try again.');
            }
        }
    };

    const openSubmitForm = (task) => {
        setSelectedTask(task);
        setSubmissionText('');
        setShowSubmitForm(true);
    };

    const openEditForm = (submission) => {
        setEditingSubmission(submission);
        setSubmissionText(submission.submissionText);
        setShowSubmitForm(true);
    };

    const closeForm = () => {
        setShowSubmitForm(false);
        setSelectedTask(null);
        setEditingSubmission(null);
        setSubmissionText('');
    };

    const formatDate = (dateString) => {
        try {
            const date = new Date(dateString);
            if (isNaN(date.getTime())) {
                return 'Invalid Date';
            }
            return date.toLocaleDateString();
        } catch (error) {
            console.error('Error formatting date:', error, dateString);
            return 'Invalid Date';
        }
    };

    const isTaskSubmitted = (taskId) => {
        return Array.isArray(mySubmissions) && mySubmissions.some(sub => sub.taskId && sub.taskId._id === taskId);
    };

    const getSubmissionForTask = (taskId) => {
        return Array.isArray(mySubmissions) ? mySubmissions.find(sub => sub.taskId && sub.taskId._id === taskId) : null;
    };

    const isTaskOverdue = (dueDate) => {
        try {
            const due = new Date(dueDate);
            if (isNaN(due.getTime())) {
                return false;
            }
            return new Date() > due;
        } catch (error) {
            console.error('Error checking if task is overdue:', error, dueDate);
            return false;
        }
    };

    return (
        <div className="student-task-view">
            <div className="header-section">
                <h2>Available Tasks</h2>
                <button 
                    className="btn btn-secondary refresh-btn"
                    onClick={() => {
                        fetchTasks();
                        fetchMySubmissions();
                    }}
                    disabled={loading}
                >
                    ðŸ”„ Refresh Tasks
                </button>
            </div>
            
            {/* Submit Task Form */}
            {showSubmitForm && (
                <div className="submit-form-overlay">
                    <div className="submit-form">
                        <h3>
                            {editingSubmission ? 'Edit Submission' : 'Submit Task'}
                        </h3>
                        {selectedTask && !editingSubmission && (
                            <div className="task-info">
                                <h4>{selectedTask.title}</h4>
                                <p><strong>Due:</strong> {formatDate(selectedTask.dueDate)} at {selectedTask.dueTime}</p>
                                <p><strong>Max Marks:</strong> {selectedTask.maxMarks}</p>
                            </div>
                        )}
                        <form onSubmit={editingSubmission ? handleUpdateSubmission : handleSubmitTask}>
                            <div className="form-group">
                                <label>Your Submission:</label>
                                <textarea
                                    value={submissionText}
                                    onChange={(e) => setSubmissionText(e.target.value)}
                                    placeholder="Enter your task submission here..."
                                    required
                                    rows="8"
                                />
                            </div>
                            <div className="form-actions">
                                <button type="submit" className="btn btn-primary">
                                    {editingSubmission ? 'Update Submission' : 'Submit Task'}
                                </button>
                                <button 
                                    type="button" 
                                    className="btn btn-secondary"
                                    onClick={closeForm}
                                >
                                    Cancel
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}

            {/* Tasks List */}
            <div className="tasks-section">
                <h3>Available Tasks</h3>
                {loading ? (
                    <div className="loading-state">
                        <div className="loading-spinner"></div>
                        <p>Loading tasks...</p>
                    </div>
                ) : Array.isArray(tasks) && tasks.length > 0 ? (
                    <div className="tasks-list">
                        {tasks.filter(task => task && task._id).map((task) => {
                            const submission = getSubmissionForTask(task._id);
                            const isSubmitted = isTaskSubmitted(task._id);
                            const isOverdue = isTaskOverdue(task.dueDate);
                            
                            return (
                                <div key={task._id} className={`task-item ${isOverdue ? 'overdue' : ''}`}>
                                    <div className="task-header">
                                        <h4>{task.title}</h4>
                                        <span className="task-id">{task.Task_Id}</span>
                                    </div>
                                    <p className="task-description">{task.description}</p>
                                    <div className="task-details">
                                        <span className={`due-date ${isOverdue ? 'overdue' : ''}`}>
                                            Due: {formatDate(task.dueDate)} at {task.dueTime}
                                        </span>
                                        <span>Max Marks: {task.maxMarks}</span>
                                        <span className={`status ${task.status}`}>{task.status}</span>
                                    </div>
                                    
                                                                         {isSubmitted && submission ? (
                                         <div className="submission-status">
                                             <div className="submission-info">
                                                 <h5>Your Submission:</h5>
                                                 <p>{submission.submissionText}</p>
                                                 <p><strong>Submitted:</strong> {formatDate(submission.submittedAt)}</p>
                                                 <p className={`submission-status-badge ${submission.status}`}>
                                                     Status: {submission.status}
                                                 </p>
                                             </div>
                                            
                                            {submission.status === 'graded' ? (
                                                <div className="grade-info">
                                                    <h5>Grade:</h5>
                                                    <p><strong>Marks:</strong> {submission.marks}/{task.maxMarks}</p>
                                                    <p><strong>Feedback:</strong> {submission.feedback}</p>
                                                </div>
                                            ) : (
                                                <div className="submission-actions">
                                                    <button 
                                                        className="btn btn-secondary"
                                                        onClick={() => openEditForm(submission)}
                                                    >
                                                        Edit Submission
                                                    </button>
                                                    <button 
                                                        className="btn btn-danger"
                                                        onClick={() => handleDeleteSubmission(submission._id)}
                                                    >
                                                        Delete Submission
                                                    </button>
                                                </div>
                                            )}
                                        </div>
                                    ) : (
                                        <div className="task-actions">
                                            <button 
                                                className="btn btn-primary"
                                                onClick={() => openSubmitForm(task)}
                                            >
                                                Submit Task
                                            </button>
                                        </div>
                                    )}
                                </div>
                            );
                        })}
                    </div>
                ) : (
                    <div className="no-tasks-message">
                        <h3>No Tasks Available</h3>
                        <p>There are currently no tasks assigned by staff members.</p>
                        <p>Check back later or contact your instructor if you believe this is an error.</p>
                    </div>
                )}
            </div>

            {/* My Submissions Summary */}
            <div className="submissions-summary">
                <h3>My Submissions Summary</h3>
                <div className="summary-stats">
                    <div className="stat-item">
                        <span className="stat-number">{Array.isArray(mySubmissions) ? mySubmissions.length : 0}</span>
                        <span className="stat-label">Total Submissions</span>
                    </div>
                    <div className="stat-item">
                        <span className="stat-number">
                            {Array.isArray(mySubmissions) ? mySubmissions.filter(sub => sub.status === 'graded').length : 0}
                        </span>
                        <span className="stat-label">Graded</span>
                    </div>
                    <div className="stat-item">
                        <span className="stat-number">
                            {Array.isArray(mySubmissions) ? mySubmissions.filter(sub => sub.status === 'submitted').length : 0}
                        </span>
                        <span className="stat-label">Pending</span>
                    </div>
                    <div className="stat-item">
                        <span className="stat-number">
                            {Array.isArray(mySubmissions) ? mySubmissions.filter(sub => sub.status === 'late').length : 0}
                        </span>
                        <span className="stat-label">Late</span>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default StudentTaskView;
